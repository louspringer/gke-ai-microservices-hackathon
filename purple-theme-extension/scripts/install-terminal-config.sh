#!/bin/bash

# Terminal Purple Theme Configuration Installation Script
# This script installs purple color scheme for terminal and shell

set -e

# Colors for output
PURPLE='\033[0;35m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
THEME_DIR="$(dirname "$SCRIPT_DIR")"

echo -e "${PURPLE}🎨 Terminal Purple Theme Configuration Installer${NC}"
echo "========================================================="

# Function to print status messages
print_status() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Detect current shell
detect_shell() {
    if [ -n "$ZSH_VERSION" ]; then
        echo "zsh"
    elif [ -n "$BASH_VERSION" ]; then
        echo "bash"
    else
        # Check default shell
        basename "$SHELL"
    fi
}

# Backup existing shell configuration
backup_shell_config() {
    local shell_type="$1"
    local config_file="$2"
    
    if [ -f "$config_file" ]; then
        local backup_file="${config_file}.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$config_file" "$backup_file"
        print_status "Backed up existing $shell_type configuration to $backup_file"
        return 0
    else
        print_warning "No existing $shell_type configuration found at $config_file"
        return 1
    fi
}

# Install ZSH purple theme configuration
install_zsh_config() {
    local zshrc_file="$HOME/.zshrc"
    
    echo "Installing ZSH purple theme configuration..."
    
    # Backup existing configuration
    backup_shell_config "ZSH" "$zshrc_file"
    
    # Create .zshrc if it doesn't exist
    touch "$zshrc_file"
    
    # Check if purple theme is already configured
    if grep -q "Purple Theme ZSH Configuration" "$zshrc_file" 2>/dev/null; then
        print_warning "Purple theme configuration already exists in .zshrc"
        read -p "Do you want to update it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return 0
        fi
        
        # Remove existing purple theme configuration
        sed -i.tmp '/# Purple Theme ZSH Configuration/,/echo "Purple ZSH theme configuration loaded!"/d' "$zshrc_file"
    fi
    
    # Add purple theme configuration to .zshrc
    cat >> "$zshrc_file" << 'EOF'

# Purple Theme ZSH Configuration
# Auto-generated by Purple Theme Installer

# Source purple colors
if [ -f "$HOME/.config/purple-theme/purple-colors.sh" ]; then
    source "$HOME/.config/purple-theme/purple-colors.sh"
elif [ -f "$(dirname "${(%):-%x}")/../shell/purple-colors.sh" ]; then
    source "$(dirname "${(%):-%x}")/../shell/purple-colors.sh"
fi

# Apply terminal background and foreground colors immediately
if [ -n "$TERM_BACKGROUND" ] && [ -n "$TERM_FOREGROUND" ]; then
    printf '\033]11;%s\007' "$TERM_BACKGROUND"  # Set background color
    printf '\033]10;%s\007' "$TERM_FOREGROUND"  # Set foreground color
fi

# ZSH-specific purple theme settings
autoload -U colors && colors

# Enhanced purple prompt with git integration
autoload -Uz vcs_info
precmd() { vcs_info }

# Git info format
zstyle ':vcs_info:git:*' formats ' (%b)'
zstyle ':vcs_info:*' enable git

# Purple-themed ZSH prompt
PROMPT='%F{135}┌─[%f%F{183}%n%f%F{255}@%f%F{54}%m%f%F{135}]─[%f%F{176}%~%f%F{135}]%f%F{92}${vcs_info_msg_0_}%f
%F{135}└─❯%f '

# Right prompt with timestamp and exit code
RPROMPT='%F{240}[%T]%f %(?..%F{red}✗%f)'

# History settings
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
setopt HIST_VERIFY SHARE_HISTORY APPEND_HISTORY INC_APPEND_HISTORY
setopt HIST_IGNORE_DUPS HIST_IGNORE_ALL_DUPS HIST_REDUCE_BLANKS HIST_IGNORE_SPACE

# Enhanced completion with purple highlighting
autoload -U compinit
compinit

# Completion styling with purple theme
zstyle ':completion:*' menu select
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*:descriptions' format '%F{magenta}-- %d --%f'
zstyle ':completion:*:messages' format '%F{purple}-- %d --%f'
zstyle ':completion:*:warnings' format '%F{red}-- no matches found --%f'

# Key bindings
bindkey '^[[A' history-search-backward
bindkey '^[[B' history-search-forward
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey '^[[3~' delete-char

echo "Purple ZSH theme configuration loaded!"
EOF
    
    print_status "ZSH purple theme configuration added to ~/.zshrc"
}

# Install Bash purple theme configuration
install_bash_config() {
    local bash_profile="$HOME/.bash_profile"
    local bashrc="$HOME/.bashrc"
    
    # Determine which file to use (macOS typically uses .bash_profile, Linux uses .bashrc)
    local config_file
    if [[ "$OSTYPE" == "darwin"* ]]; then
        config_file="$bash_profile"
    else
        config_file="$bashrc"
    fi
    
    echo "Installing Bash purple theme configuration..."
    
    # Backup existing configuration
    backup_shell_config "Bash" "$config_file"
    
    # Create config file if it doesn't exist
    touch "$config_file"
    
    # Check if purple theme is already configured
    if grep -q "Purple Theme Bash Configuration" "$config_file" 2>/dev/null; then
        print_warning "Purple theme configuration already exists in $config_file"
        read -p "Do you want to update it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return 0
        fi
        
        # Remove existing purple theme configuration
        sed -i.tmp '/# Purple Theme Bash Configuration/,/echo "Purple Bash theme configuration loaded!"/d' "$config_file"
    fi
    
    # Add purple theme configuration
    cat >> "$config_file" << 'EOF'

# Purple Theme Bash Configuration
# Auto-generated by Purple Theme Installer

# Source purple colors
if [ -f "$HOME/.config/purple-theme/purple-colors.sh" ]; then
    source "$HOME/.config/purple-theme/purple-colors.sh"
elif [ -f "$(dirname "${BASH_SOURCE[0]}")/../shell/purple-colors.sh" ]; then
    source "$(dirname "${BASH_SOURCE[0]}")/../shell/purple-colors.sh"
fi

# Apply terminal background and foreground colors immediately
if [ -n "$TERM_BACKGROUND" ] && [ -n "$TERM_FOREGROUND" ]; then
    printf '\033]11;%s\007' "$TERM_BACKGROUND"  # Set background color
    printf '\033]10;%s\007' "$TERM_FOREGROUND"  # Set foreground color
fi

# Git branch function for bash
git_branch_bash() {
    git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# Purple-themed bash prompt
PS1='\[\033[1;35m\]\u\[\033[0m\]@\[\033[1;34m\]\h\[\033[0m\]:\[\033[1;36m\]\w\[\033[0m\] \[\033[1;33m\]$(git_branch_bash)\[\033[0m\]\n\[\033[1;35m\]❯\[\033[0m\] '

# History settings
HISTSIZE=10000
HISTFILESIZE=20000
HISTCONTROL=ignoredups:ignorespace
shopt -s histappend

echo "Purple Bash theme configuration loaded!"
EOF
    
    print_status "Bash purple theme configuration added to $config_file"
}

# Install purple color scheme files
install_color_files() {
    local config_dir="$HOME/.config/purple-theme"
    
    echo "Installing purple color scheme files..."
    
    # Create configuration directory
    mkdir -p "$config_dir"
    
    # Copy color scheme files
    cp "$THEME_DIR/shell/purple-colors.sh" "$config_dir/"
    cp "$THEME_DIR/shell/zshrc-purple.sh" "$config_dir/"
    
    # Make files executable
    chmod +x "$config_dir/purple-colors.sh"
    chmod +x "$config_dir/zshrc-purple.sh"
    
    print_status "Purple color scheme files installed to ~/.config/purple-theme/"
}

# Install Terminal.app theme (macOS only)
install_terminal_app_theme() {
    if [[ "$OSTYPE" != "darwin"* ]]; then
        print_warning "Terminal.app theme installation skipped (not on macOS)"
        return 0
    fi
    
    echo "Installing Terminal.app purple theme..."
    
    local terminal_theme="$THEME_DIR/terminal/Terminal-Purple.terminal"
    
    if [ ! -f "$terminal_theme" ]; then
        print_error "Terminal.app theme file not found: $terminal_theme"
        return 1
    fi
    
    # Import the terminal theme
    open "$terminal_theme"
    
    print_status "Terminal.app purple theme imported (you may need to set it as default manually)"
    print_warning "To set as default: Terminal > Preferences > Profiles > Purple Theme > Default"
}

# Install iTerm2 theme (macOS only)
install_iterm2_theme() {
    if [[ "$OSTYPE" != "darwin"* ]]; then
        print_warning "iTerm2 theme installation skipped (not on macOS)"
        return 0
    fi
    
    echo "Installing iTerm2 purple theme..."
    
    local iterm_theme="$THEME_DIR/terminal/Purple-Theme.itermcolors"
    
    if [ ! -f "$iterm_theme" ]; then
        print_error "iTerm2 theme file not found: $iterm_theme"
        return 1
    fi
    
    # Import the iTerm2 theme
    open "$iterm_theme"
    
    print_status "iTerm2 purple theme imported (you may need to set it as default manually)"
    print_warning "To set as default: iTerm2 > Preferences > Profiles > Colors > Color Presets > Purple Theme"
}

# Test terminal colors
test_terminal_colors() {
    echo
    echo "Testing terminal color support..."
    
    # Source the color file to test
    if [ -f "$HOME/.config/purple-theme/purple-colors.sh" ]; then
        source "$HOME/.config/purple-theme/purple-colors.sh"
        
        echo -e "${COLOR_BRIGHT_MAGENTA}Purple Terminal Theme Test${COLOR_RESET}"
        echo -e "${COLOR_PURPLE_DEEP}■${COLOR_RESET} Deep Purple"
        echo -e "${COLOR_PURPLE_MEDIUM}■${COLOR_RESET} Medium Purple"
        echo -e "${COLOR_PURPLE_LIGHT}■${COLOR_RESET} Light Purple"
        echo -e "${COLOR_PURPLE_BRIGHT}■${COLOR_RESET} Bright Purple"
        echo -e "${COLOR_LAVENDER}■${COLOR_RESET} Lavender"
        echo -e "${COLOR_PLUM}■${COLOR_RESET} Plum"
        
        print_status "Terminal color test completed"
    else
        print_warning "Color files not found, skipping color test"
    fi
}

# Main installation process
main() {
    echo "Starting terminal purple theme configuration installation..."
    echo
    
    # Detect current shell
    local current_shell=$(detect_shell)
    print_status "Detected shell: $current_shell"
    
    # Install color scheme files
    echo
    echo "Installing color scheme files..."
    install_color_files
    
    # Install shell-specific configuration
    echo
    case "$current_shell" in
        "zsh")
            install_zsh_config
            ;;
        "bash")
            install_bash_config
            ;;
        *)
            print_warning "Unsupported shell: $current_shell"
            print_warning "You may need to manually configure your shell"
            ;;
    esac
    
    # Install terminal emulator themes (macOS only)
    if [[ "$OSTYPE" == "darwin"* ]]; then
        echo
        echo "Installing terminal emulator themes..."
        install_terminal_app_theme
        install_iterm2_theme
    fi
    
    # Test colors
    test_terminal_colors
    
    echo
    echo -e "${GREEN}🎉 Terminal configuration installation completed!${NC}"
    echo
    echo "To activate the purple theme:"
    echo "1. Restart your terminal or run: source ~/.${current_shell}rc"
    echo "2. For Terminal.app: Set 'Purple Theme' as default in Preferences"
    echo "3. For iTerm2: Select 'Purple Theme' color preset in Preferences"
    echo
    echo "Available commands after restart:"
    echo "  - apply_purple_theme    : Apply colors to current session"
    echo "  - test_purple_contrast  : Test color contrast and readability"
    echo "  - purple_status         : Show theme status (ZSH only)"
    echo
}

# Run main function
main "$@"